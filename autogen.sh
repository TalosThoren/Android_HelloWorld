#!/bin/sh
# Autogeneration script, run this script to set up the
# project. Note that you must have ANDROID_SDK set. You 
# also need ANDROID_NDK set if you are using native code.

# This script must run from the PROJECT_DIR or it will fail.

# Retrieve PROJECT_DIR
PROJECT_DIR="$(dirname $0)"

# Adjust these vars to fit your project
PROJECT_NAME="HelloWorld"
PROJECT_TARGET="1"

# Where we install our libraries
LIB_DIR=$PROJECT_DIR/libs

# If ANDROID_SDK is not already set, set it to this default.
# NOTE: Alter this if you have a different default location.
if [ -z "$ANDROID_SDK" ]; then
    # Change ANDROID_SDK below to the path of your SDK
    export ANDROID_SDK=$HOME/Android/ANDROID_SDK    #This is a symbolic link to the SDK on my system
fi

# Set the android command
ANDROID_CMD=$ANDROID_SDK/tools/android

# Verify that the android tool exists and error if unavailable
if [ ! -x "$ANDROID_CMD" ]; then
    echo "ERROR: android sdk is unavailable."
    echo "Be sure you've downloaded the sdk and that the ANDROID_SDK environment"
    echo "variable is set to the unzipped sdk directory."
    exit 1
fi

# Locations of support libraries we need from the sdk
LIB_APPCOMPAT_SRC_DIR=$ANDROID_SDK/extras/android/support/v7/appcompat
LIB_APPCOMPAT_INST_DIR=$LIB_DIR/appcompat

# Verify that appcompat library exists and error if unavailable
if [ ! -d "$LIB_APPCOMPAT_SRC_DIR" ]; then
    echo "ERROR: appcompat libraries unavailable."
    echo "Be sure you've installed the support libraries and repositories using"
    echo "the android sdk manager."
    exit 1
fi

# For jni projects we also need the ndk
if [ -d "$PROJECT_DIR/jni" ]; then
    # If ANDROID_NDK is not already set, set it to this default.
    # NOTE: Alter this if you have a different default location.
    if [ -z "$ANDROID_NDK" ]; then
        # Change ANDROID_NDK below to the path of your NDK
        export ANDROID_NDK=$HOME/Android/ANDROID_NDK    #This is a symbolic link to the NDK on my system
    fi

    # Set the ndk-build command
    NDK_BUILD_CMD=$ANDROID_NDK/ndk-build

    # Verify that the ndk-build tool exists and error if unavailable
    if [ ! -x "$NDK_BUILD_CMD" ]; then
        echo "WARNING: ndk-build is unavailable."
        echo "This package contains jni code which must be compiled using ndk-build."
        echo "Be sure you've downloaded the ndk and that the ANDROID_NDK environment"
        echo "variable is set to the unzipped ndk. You can not build the native code"
        echo "until the ndk is installed appropriately."
    fi
fi

# If there is no libs directory, make it now
if [ ! -d  "$LIB_DIR" ]; then
    mkdir $PROJECT_DIR/libs
fi

# Obtain the appcompat library that this project needs;
# you must have these installed within your SDK.
cp -R $LIB_APPCOMPAT_SRC_DIR $LIB_DIR

# Update the appcompat lib so we can use its resources
$ANDROID_CMD update lib-project \
    --path $LIB_APPCOMPAT_INST_DIR

# Finally, update this project so we can build it
$ANDROID_CMD update project \
    --path $PROJECT_DIR \
    --name $PROJECT_NAME \
    --target $PROJECT_TARGET \
    --subprojects

# We create a secure.properties file to store keystore and key data
SECURE_PROPERTIES=$PROJECT_DIR/secure.properties

# If no secure.properties file exists, create it now
# NOTE: You must manually edit the secure.properties file to point to your generated
# keystore and to set you key name and passwords (if desired.)
if [ ! -f $SECURE_PROPERTIES ]; then
    echo "# This file is automatically generated by the autogen.sh script." > $SECURE_PROPERTIES
    echo "# Use it to store your keystore and key data if you wish." >> $SECURE_PROPERTIES
    echo "# DO NOT INCLUDE THIS FILE IN SOURCE CONTROL!" >> $SECURE_PROPERTIES
    echo "key.store=" >> $SECURE_PROPERTIES
    echo "key.alias=" >> $SECURE_PROPERTIES
    echo "key.store.password=" >> $SECURE_PROPERTIES
    echo "key.alias.password=" >> $SECURE_PROPERTIES
fi
